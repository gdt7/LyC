package lyc.compiler;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Map;
import lyc.compiler.model.SymbolTableStruct;
import java.util.ArrayList;
import java.util.List;

class Parser;

action code {:
	Object currIdent,currentValue,currentDataType,currentLong;
:}
parser code
{:
	public Map<Object,Object> table = new HashMap();
	public List<SymbolTableStruct> symbolList = new ArrayList();
:};

// Terminals
terminal OP_ASIG;
terminal OP_MAS;
terminal OP_RES;
terminal OP_MULT;
terminal OP_DIV;
terminal PAR_A;
terminal PAR_C;
terminal LLAVE_A;
terminal LLAVE_C;
terminal CONST_ENT;
terminal CONST_STR;
terminal CONST_FLT;
terminal ID;
terminal MIENTRAS;
terminal OP_MAY;
terminal OP_MEN;
terminal OP_IG;
terminal OP_MAYIG;
terminal OP_MENIG;
terminal FOR;
terminal SI;
terminal SINO;
terminal AND;
terminal OR;
terminal FLOAT;
terminal INT;
terminal STRING; 
terminal PYC;
terminal READ;
terminal WRITE;
terminal INIT;
terminal NOT;
terminal DOS_PUNTOS;
terminal COMA;
terminal COR_A;
terminal COR_C;
terminal GETPENULTIMATEPOSITION;
terminal TRIANGULO;

// Non Terminals
non terminal ss;
non terminal declaracion;
non terminal listadec;
non terminal sentdec;
non terminal programa;
non terminal sentencia;
non terminal asignacion;
non terminal listaid;
non terminal iteracion;
non terminal seleccion;
non terminal entrada;
non terminal salida;
non terminal condicion;
non terminal comparacion;
non terminal comparador;
non terminal expresion;
non terminal funcion;
non terminal listaconst;
non terminal termino;
non terminal factor;

// Start Symbol Definition
// Start Symbol Definition
start with ss;

// Grammar Rules
ss 
    ::= declaracion programa
		{: System.out.println("Inicio de programa principal con bloque de declaracion de variables: "); :}
	| 	declaracion 
		{: System.out.println("Inicio del programa principal con declaracion y sin programa: "); :}
	| 	 programa
		{: System.out.println("Inicio del programa principal sin declaracion: "); :}
	| 	 
		{: System.out.println("Sin nada: "); :}
    ;
	
declaracion
	::= INIT LLAVE_A listadec LLAVE_C
		{: System.out.println("Declaracion de variables: "); :}
    ;

listadec
	::= listadec sentdec
		{: System.out.println("Lista de sentencia de declaracion de variables: "); :}
	| sentdec 
		{: System.out.println("Sentencia unica de declaracion de variables: "); :}
    ;

sentdec
	::= listaid DOS_PUNTOS INT
		{: 	System.out.println("Lista de variables enteras: "); :}
	| 	listaid DOS_PUNTOS FLOAT
		{: 	System.out.println("Lista de variables flotantes: "); :}
	| 	listaid DOS_PUNTOS STRING
		{: 	System.out.println("Lista de variables strings: "); :}
    ;
	
listaid
	::= listaid COMA ID
		{: 	System.out.println("Lista de IDs: "); :}
	| 	ID
		{: 	System.out.println("Unico ID: "); :}
	;
	 
programa 
    ::= sentencia 
		{: System.out.println("Sentencia única en el programa: "); :}
    | sentencia PYC 
		{: System.out.println("Sentencia con punto y coma en el programa: "); :}
    | programa sentencia
		{: System.out.println("Programa con múltiples sentencias: "); :}
	| programa sentencia PYC
		{: System.out.println("Programa con múltiples sentencias: "); :}
    ;

sentencia 
    ::= asignacion 
		{: System.out.println("Asignación encontrada"); :}
    | iteracion 
		{: System.out.println("Iteración encontrada"); :}
    | seleccion
		{: System.out.println("Selección encontrada"); :}
	| entrada
		{: System.out.println("Entrada: "); :}
	| salida
		{: System.out.println("Salida: "); :}
    ;
	
entrada
	::= READ PAR_A ID PAR_C
		{: System.out.println("Sentencia de Entrada: "); :}
    ;
	
salida
	::= WRITE PAR_A CONST_STR PAR_C
		{: System.out.println("Sentencia de entrada de una constante string: "); :}
	|   WRITE PAR_A ID PAR_C
		{: System.out.println("Sentencia de entrada de un id: "); :}
    ;
	
asignacion 
    ::= listaid OP_ASIG expresion
		{: System.out.println("Lista de asignacion de variables: "); :}
    ;
	
seleccion 
    ::= SI PAR_A condicion PAR_C LLAVE_A programa LLAVE_C 
		{: System.out.println("Estructura if con condición: "); :}
    | SI PAR_A condicion PAR_C LLAVE_A programa LLAVE_C SINO LLAVE_A programa LLAVE_C
		{: System.out.println("Estructura if-else con condición: "); :}
    ;

iteracion 
    ::= MIENTRAS PAR_A condicion PAR_C LLAVE_A programa LLAVE_C 
		{: System.out.println("Estructura while con condición: "); :}
    | FOR PAR_A asignacion PYC condicion PYC expresion PAR_C LLAVE_A programa LLAVE_C
		{: System.out.println("Estructura for con asignación: " +", condición: " + ", y expresión: " ); :}
    ;
 
condicion 
    ::= comparacion 
		{: System.out.println("Condición simple: "); :}
    | condicion AND comparacion 
		{: System.out.println("Condición compuesta con AND: " +  " && "); :}
    | condicion OR comparacion
		{: System.out.println("Condición compuesta con OR: " + " || "); :}
    ;

comparacion 
    ::= expresion comparador expresion
		{: System.out.println("Comparación: "); :}
	| NOT expresion comparador expresion
		{: System.out.println("Comparación: "); :}
    ;

comparador 
    ::= OP_MAYIG 
    {: System.out.println("Comparador >= "); :}
    | OP_MENIG 
    {: System.out.println("Comparador <= "); :}
    | OP_MAY 
    {: System.out.println("Comparador > "); :}
    | OP_MEN 
    {: System.out.println("Comparador < "); :}
    | OP_IG
    {: System.out.println("Comparador == "); :}
    ;

expresion 
    ::= expresion OP_MAS termino 
		{: System.out.println("Expresión suma: "); :}
    | expresion OP_RES termino 
		{: System.out.println("Expresión resta: "); :}
    | termino
		{: System.out.println("Expresión simple: "); :}
	| funcion
		{: System.out.println("Expresion es Funcion especial: "); :}
    ;
	
funcion
	 ::= GETPENULTIMATEPOSITION PAR_A COR_A listaconst COR_C PAR_C
		{: System.out.println("Expresión suma: "); :}
	;

listaconst
	 ::= listaconst COMA CONST_ENT
		{: System.out.println("Componente de lista: Constante entera "); :}
	|	listaconst COMA CONST_FLT
		{: System.out.println("Componente de lista: Constante flotante "); :}
	|	 CONST_FLT
		{: System.out.println("Constante entera: "); :}
	|	 CONST_ENT
		{: System.out.println("Constante entera: "); :}
	;

termino 
    ::= termino OP_MULT factor 
		{: System.out.println("Término multiplicación: "); :}
    | termino OP_DIV factor 
		{: System.out.println("Término división: " + " / "); :}
    | factor
		{: System.out.println("Término simple: " ); :}
    ;

factor 
    ::= ID 
		{: System.out.println("Factor ID: " ); :}
    | CONST_ENT 
		{: System.out.println("Factor constante entera: " ); :}
	| CONST_FLT 
		{: System.out.println("Factor constante flotante: " ); :}
	| CONST_STR
		{: System.out.println("Factor constante string: " ); :}
    | PAR_A expresion PAR_C
		{: System.out.println("Factor expresión entre paréntesis: "); :}
    ;