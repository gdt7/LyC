package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.model.SymbolTableStruct;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import lyc.compiler.model.CompilerException;
import lyc.compiler.model.IdentifierAlreadyExistsException;
import lyc.compiler.model.IdentifierNotDeclaredException;
import lyc.compiler.files.FileOutputWriter;
import lyc.compiler.files.AsmCodeGenerator;
import lyc.compiler.model.CompilerState;
import java.util.Map;
import java.util.HashMap; // si también necesitas HashMap




class Parser;

parser code
{:

	public CompilerState cState;
	 //private Map<String, Integer> table;
	 private Map<String, Float> table = new HashMap<>();

	String myVal;
  // Lista para almacenar el código intermedio
  	 int intCodeIdx = 0;
	 float pos, e1, e2,e3;
     public List<String> intermediateCode = new ArrayList<>();
     public Stack<String> stack = new Stack<>(); // La pila para almacenar IDs y valores
	 public Stack<String> idsStack = new Stack<>();
	 public Stack<String> idsStackGeneral = new Stack<>();
	 public Stack<String> pilaVariablesDeclaradas = new Stack<>();
	 
  public List<String> getIntermediateCode() {
    return intermediateCode;
  }


  private void generateAssembler(){
  	 cState.setIntermediateCode(intermediateCode);
  	 FileOutputWriter.writeOutput("final.asm", new AsmCodeGenerator(cState)); 
  }

  public void polaca(String code) {
    intermediateCode.add(code);
    System.out.println("Valor agregado a polaca: " + code);
    intCodeIdx++;
  }
  
  public void insertarCmp(){
  	 polaca("CMP");
  } 
	
  public void insertarBi(){
  	 polaca("BI");
  } 	

  public void insertarBge(String value){
  	//BUSCAR EN LAS CONSTANTES Y PONER EL CODIGO BGE;BLE;ETC
  	//REEMPLAZAR ESTO POR EL CODIGO BGE
  	 polaca(value);
  } 
  
  public void insertarBge(){
  	 String value = desapilar();
  	//BUSCAR EN LAS CONSTANTES Y PONER EL CODIGO BGE;BLE;ETC
  	//REEMPLAZAR ESTO POR EL CODIGO BGE
  	 polaca(value);
  } 
  
  public void avanzar(){
  	 apilar(String.valueOf(intCodeIdx));
  	 polaca("GOTO");
  }
  
  public void escribirGoTo(){
  	String value = desapilar();
  	System.out.println("Desapilo en goTo: " + value);
  	intermediateCode.set(Integer.valueOf(value),String.valueOf(intCodeIdx));
  }
  
  public void escribirGoToSino(){
  	String value = desapilar();
  	System.out.println("Desapilo en goToSino: " + value);
  	intermediateCode.set(Integer.valueOf(value),String.valueOf(intCodeIdx + 1));
  	apilar(String.valueOf(intCodeIdx));
  }
  
  public void escribirGoToSinoEnd(){
  	String value = desapilar();
  	System.out.println("Desapilo en goToSinoEnd: " + value);
  	intermediateCode.set(Integer.valueOf(value),String.valueOf(intCodeIdx));
  	//intCodeIdx++;
  }
  
  public void escribirET(){
  	polaca("ET");
  }
  
  
  public void escribirGoToMientras(){
  	String value = desapilar();
  	intermediateCode.set(Integer.valueOf(value),String.valueOf(intCodeIdx));
  	value = desapilar();
  	polaca(value);
  }

  public void apilar(String value) {
    stack.push(value);
    System.out.println("Valor agregado a la pila: " + value);
  }

  public String desapilar() {
    if (!stack.isEmpty()) {
      String value = stack.pop();
      System.out.println("Valor retirado de la pila: " + value);
      return value;
    } else {
      System.out.println("Pila vacía");
      return null;
    }
  }
  
  public void completarTablaSimbolosConTipoDato(String type) throws CompilerException{
  	while(!idsStack.isEmpty()){
		String value = idsStack.pop();
		for(SymbolTableStruct s : cState.getSymbolTable()){
			if(s.getNombre().equals("_".concat(value))){
				validarSiEsDuplicada(s);
				s.setTipoDato(type);	
			}
		}
	}	
  }
  
  private void validarSiEsDuplicada(SymbolTableStruct tableValue) throws CompilerException{
  	if(tableValue.getTipoDato() != null)
  	  throw new IdentifierAlreadyExistsException("Identifier already exists: " + tableValue.getNombre());
  }
  
  
    private void validarVariableNoDeclarada(String variable) throws CompilerException{
	
		if (!pilaVariablesDeclaradas.contains(variable)) {
            throw new IdentifierNotDeclaredException ("Variable no declarada: " + variable);
        }
		
	}
  
	  private void validarVariableDeclaradaDuplicada(String variable) throws CompilerException {
		if (pilaVariablesDeclaradas.contains(variable)) {
            throw new IdentifierAlreadyExistsException("Variable duplicada encontrada: " + variable);
        }
        pilaVariablesDeclaradas.push(variable);
	}
	
	public int obtenerPosicion() {
    // Devuelve 0 si la lista está vacía
    if (intermediateCode.isEmpty()) {
        return 0;
    }
    // Si no está vacía, devuelve el índice del último elemento
    return intermediateCode.size() - 1;
}

	
	
	public float resolverExpresion(float pos) {
	
	float indiceEt = pos;
        if (indiceEt == -1) {
            throw new IllegalArgumentException("No se encontró o no hay expresión");
        }

		int inicio = (indiceEt == 0) ? 0 : (int)(indiceEt + 1);
		List<String> expresion = intermediateCode.subList(inicio, intermediateCode.size());

        // Utiliza una pila para evaluar la expresión en notación postfija
        Stack<Float> pila = new Stack<>();
        
		for (String token : expresion) {
			if (esOperador(token)) {
				// Si es un operador, toma los dos últimos valores de la pila
				float operando2 = pila.pop();
				float operando1 = pila.pop();
				float resultado = aplicarOperador(token, operando1, operando2);
				pila.push(resultado);
				//System.out.println("RES: " + resultado);
			} else {
				// Intentamos convertir el token a un número flotante
				try {
					float valorNumerico = Float.parseFloat(token);
					pila.push(valorNumerico);

				} catch (NumberFormatException e) {
					 if (token.startsWith("\"") && token.endsWith("\"")) {
							// Token es una cadena entre comillas, no hacemos nada
							continue;
					}
					// Si no es un número, asumimos que es una variable y buscamos su valor en el Map
					if (table.containsKey(token)) {
						float valorVariable = table.get(token);
						pila.push(valorVariable);

					} else {
						//System.out.println("Error: La variable " + token + " no está definida en el Map.");
						throw new IllegalArgumentException("Variable " + token + " no definida");
					}
				}
			}
		}
        
        // El resultado final debe estar en la cima de la pila
		Float res = pila.pop();
        return res;
    }
	
	 private static boolean esOperador(String token) {
        return "+".equals(token) || "-".equals(token) || "*".equals(token) || "/".equals(token);
    }

		private float aplicarOperador(String operador, float operando1, float operando2) {
		switch (operador) {
			case "+":
				return operando1 + operando2;
			case "-":
				return operando1 - operando2;
			case "*":
				return operando1 * operando2;
			case "/":
				return operando1 / operando2;
			default:
				throw new IllegalArgumentException("Operador desconocido: " + operador);
		}
	}

	
	public static String tipoTriangulo(double lado1, double lado2, double lado3) {
	
	String triangulo;
	
    if (lado1 == lado2 && lado2 == lado3) {
			triangulo = "\"equilátero\"";
			//return "equilátero";
		} else if (lado1 == lado2 || lado1 == lado3 || lado2 == lado3) {
			triangulo = "\"isosceles\"";
			//return "isosceles";
		} else {
			triangulo = "\"escaleno\"";
			//return "escaleno";
		}
		return triangulo;
	}
	
	void validarTipoAsignacion(String value){
		for(SymbolTableStruct s : cState.getSymbolTable()){
				if(s.getNombre().equals("_".concat(value)) && s.getTipoDato() != "String"){
					throw new IllegalArgumentException("Error: No se puede asignar un String a una variable de tipo no String");
				}
			}
	
	}
	
	
    
:};

// Terminals
terminal OP_ASIG;
terminal OP_MAS;
terminal OP_RES;
terminal OP_MULT;
terminal OP_DIV;
terminal PAR_A;
terminal PAR_C;
terminal LLAVE_A;
terminal LLAVE_C;
terminal CONST_ENT;
terminal CONST_STR;
terminal CONST_FLT;
terminal ID;
terminal MIENTRAS;
terminal OP_MAY;
terminal OP_MEN;
terminal OP_IG;
terminal OP_MAYIG;
terminal OP_MENIG;
terminal FOR;
terminal SI;
terminal SINO;
terminal AND;
terminal OR;
terminal FLOAT;
terminal INT;
terminal STRING; 
terminal PYC;
terminal READ;
terminal WRITE;
terminal INIT;
terminal NOT;
terminal DOS_PUNTOS;
terminal COMA;
terminal COR_A;
terminal COR_C;
terminal GETPENULTIMATEPOSITION;
terminal TRIANGULO;

// Non Terminals
non terminal ss;
non terminal declaracion;
non terminal listadec;
non terminal sentdec;
non terminal programa;
non terminal sentencia;
non terminal asignacion;
non terminal listaid;
non terminal iteracion;
non terminal seleccion;
non terminal entrada;
non terminal salida;
non terminal condicion;
non terminal comparacion;
non terminal comparador;
non terminal expresion;
non terminal funcion;
non terminal listaconst;
non terminal termino;
non terminal factor;
non terminal acciones_seleccion;

// Start Symbol Definition
// Start Symbol Definition
start with ss;

// Grammar Rules
ss 
    ::= declaracion programa
		{: System.out.println("Inicio de programa principal con bloque de declaracion de variables: "); generateAssembler();:}
	| 	declaracion 
		{: System.out.println("Inicio del programa principal con declaracion y sin programa: ");generateAssembler(); :}
	| 	 programa
		{: System.out.println("Inicio del programa principal sin declaracion: "); generateAssembler();:}
	| 	 
		{: System.out.println("Sin nada: "); generateAssembler();:}
    ;
	
declaracion
	::= INIT LLAVE_A listadec LLAVE_C
		{: 
			System.out.println("Declaracion de variables: "); :}
    ;

listadec
	::= listadec sentdec
		{: System.out.println("Lista de sentencia de declaracion de variables: "); :}
	| sentdec 
		{: 
			System.out.println("Sentencia unica de declaracion de variables: ");
		:}
    ;

sentdec
	::= listaid DOS_PUNTOS INT
		{: 	
			System.out.println("Lista de variables enteras: ");
			completarTablaSimbolosConTipoDato("INT"); 
		:}
	| 	listaid DOS_PUNTOS FLOAT
		{: 	
			System.out.println("Lista de variables flotantes: "); 
			completarTablaSimbolosConTipoDato("FLOAT");	
		:}
	| 	listaid DOS_PUNTOS STRING
		{: 	
			System.out.println("Lista de variables strings: ");
			completarTablaSimbolosConTipoDato("STRING");
		:}
		
    ;
	
listaid
	::= listaid COMA ID:ident
		{: 	
			String idValue = (String) ident;
			//polaca(idValue);
			idsStack.push(idValue);
			validarVariableDeclaradaDuplicada(idValue);
			//pilaVariablesDeclaradas.push(idValue);
			//validarVariableDeclarada(idValue);
			System.out.println("Lista de IDs: "); :}
	| 	ID:ident
		{: 	
			String idValue = (String) ident;
			//polaca(idValue);
			idsStack.push(idValue);
			validarVariableDeclaradaDuplicada(idValue);
			//pilaVariablesDeclaradas.push(idValue);
			//validarVariableDeclarada(idValue);
			System.out.println("Lista de variables strings: ");
		:}

	;
	 
programa 
    ::= sentencia 
		{: System.out.println("Sentencia única en el programa: "); :}
    | sentencia PYC 
		{: System.out.println("Sentencia con punto y coma en el programa: "); :}
    | programa sentencia
		{: System.out.println("Programa con múltiples sentencias: "); :}
	| programa sentencia PYC
		{: System.out.println("Programa con múltiples sentencias: "); :}
    ;

sentencia 
    ::= asignacion 
		{: System.out.println("Asignación encontrada"); :}
    | iteracion 
		{: System.out.println("Iteración encontrada"); :}
    | seleccion
		{: System.out.println("Selección encontrada"); :}
	| entrada
		{: System.out.println("Entrada: "); :}
	| salida
		{: System.out.println("Salida: "); :}
    ;
	
entrada
	::= READ PAR_A ID:value PAR_C
		{: 
			String idValue = (String) value;
			polaca(idValue);
			System.out.println("Sentencia de Entrada: "); :}
    ;
	
salida
	::= WRITE PAR_A CONST_STR:value {: polaca((String) value) ; :} PAR_C
		{: System.out.println("Sentencia de salida de una constante string: "); :}
	|   WRITE PAR_A ID PAR_C
		{: System.out.println("Sentencia de salida de un id: "); :}
    ;
	
asignacion 
    ::= ID:ident OP_ASIG:value {: pos = obtenerPosicion();  :} expresion 
		{: 	
				float res = resolverExpresion(pos);
				String idValue = (String) ident;
				validarVariableNoDeclarada(idValue);
				polaca(idValue);
				String opAsigValue = (String) value;
				polaca(opAsigValue);

				table.put(idValue, res);
				System.out.println("Lista de asignacion de variables: ");
					
		:}
	| ID:ident OP_ASIG:valueOp CONST_STR:value
	
		{:  String cteSrtValue = (String) value;
			polaca(cteSrtValue);
			String idValue = (String) ident;
			validarVariableNoDeclarada(idValue);
			//validarTipoAsignacion(idValue);
			polaca(idValue);
			String opAsigValue = (String) valueOp;
			polaca(opAsigValue);
			System.out.println("Asignacion de constante string: " ); 
		:}
	
    ;
	
seleccion 
    ::= SI PAR_A condicion PAR_C acciones_seleccion LLAVE_A programa LLAVE_C {: escribirGoTo(); :}
    | SI PAR_A condicion PAR_C acciones_seleccion LLAVE_A programa LLAVE_C SINO {: insertarBi(); escribirGoToSino(); avanzar(); :} LLAVE_A programa LLAVE_C {: escribirGoToSinoEnd(); :}
		{: System.out.println("Estructura if-else con condición: "); :}
    ;

iteracion 
    ::= MIENTRAS {: apilar(String.valueOf(intCodeIdx)); escribirET(); :} PAR_A condicion {: insertarCmp(); insertarBge(); avanzar(); :} PAR_C LLAVE_A programa  {: insertarBi(); escribirGoToMientras(); :} LLAVE_C 
		{: System.out.println("Estructura while con condición: "); :}
    | FOR PAR_A asignacion PYC condicion PYC expresion PAR_C LLAVE_A programa LLAVE_C
		{: System.out.println("Estructura for con asignación: " +", condición: " + ", y expresión: " ); :}
    ;
 
condicion 
    ::= comparacion 	
    | condicion AND comparacion 
    | condicion OR comparacion
    ;

comparacion 
    ::= expresion comparador expresion
		{: System.out.println("Comparación: "); :}
	| NOT expresion comparador expresion
		{: System.out.println("Comparación: "); :}
    ;

comparador 
    ::= OP_MAYIG:value 
    {: 	String opMayIgValue = (String) value;
    	apilar((String) value);
		System.out.println("Comparador >= "); :}
    | OP_MENIG:value 
    {:  String opMenIgValue = (String) value;
		System.out.println("Comparador <= ");
		apilar((String) value); :}
    | OP_MAY:value  
	{: 	String opMayValue = (String) value;	
		System.out.println("Comparador > "); 
		apilar((String) value); :}
    | OP_MEN:value  
    {: 	String opMenValue = (String) value;
		System.out.println("Comparador < "); 
		apilar((String) value); :}
    | OP_IG:value 
    {: 	String opIgValue = (String) value;
    	apilar((String) value);
		System.out.println("Comparador == "); :}
    ;

expresion 
    ::= expresion OP_MAS:value termino 
		{: String opMasValue = (String) value;
			polaca(opMasValue);
			System.out.println("Expresión suma: "); :}
    | expresion OP_RES:value termino 
		{: 	String opMenosValue = (String) value;
			polaca(opMenosValue);
			System.out.println("Expresión resta: "); :}
    | termino
		{: System.out.println("Expresión simple: "); :}
	| funcion
		{: System.out.println("Expresion es Funcion especial: "); :}
    ;
	
funcion
	 ::= GETPENULTIMATEPOSITION PAR_A COR_A listaconst COR_C PAR_C
		{: 	myVal = desapilar();
			myVal = desapilar();
			polaca(myVal);
			System.out.println("Funcion especial GETPENULTIMATEPOSITION: "); :}
	| 	TRIANGULO PAR_A {: pos = obtenerPosicion(); :} expresion {: e1 = resolverExpresion(pos); :} COMA {: pos = obtenerPosicion(); :} expresion {: e2 = resolverExpresion(pos); :} COMA {: pos = obtenerPosicion(); :} expresion {: e3 = resolverExpresion(pos); :} PAR_C
		{: 
			String triangulo = tipoTriangulo(e1,e2,e3);
			polaca(triangulo);

			System.out.println("Funcion especial TRANGULO: "); :}
	;

listaconst
	 ::= listaconst COMA CONST_ENT:value
		{:  String cteEntValue = (String) value;
			apilar(cteEntValue);
			idsStack.push(cteEntValue);
			System.out.println("Componente de lista: Constante entera "); :}
	|	listaconst COMA CONST_FLT:value
		{: 	String cteFltValue = (String) value;
			apilar(cteFltValue);
			System.out.println("Componente de lista: Constante flotante "); :}
	|	 CONST_FLT:value
		{: 	String cteFltValue = (String) value;
			apilar(cteFltValue);
			System.out.println("Constante entera: "); :}
	|	 CONST_ENT:value
		{: 	String cteEntValue = (String) value;
			apilar(cteEntValue);
			System.out.println("Constante entera: "); :}
	;

	
termino 
    ::= termino OP_MULT:value factor 
		{:  String opMultValue = (String) value;
			polaca(opMultValue);
			System.out.println("Término multiplicación: "); :}
    | termino OP_DIV:value  factor 
		{: String opDivValue = (String) value;
			polaca(opDivValue);
			System.out.println("Término división: " + " / "); :}
    | factor
		{: System.out.println("Término simple: " ); :}
    ;

factor 
    ::= ID:value 
		{:  String idValue = (String) value;
			polaca(idValue);
			idsStack.push(idValue);
			validarVariableNoDeclarada(idValue);
			System.out.println("Factor ID: " ); 
			
		:}
    | CONST_ENT:value 
		{:  String cteEntValue = (String) value;
			polaca(cteEntValue);
			System.out.println("Factor constante entera: " ); 
		
		:}
	| CONST_FLT:value 
		{:  String cteFltValue = (String) value;
			polaca(cteFltValue);
			System.out.println("Factor constante flotante: " ); 
		
		:}
	
    | PAR_A expresion PAR_C
		{:  
			System.out.println("Factor expresión entre paréntesis: "); :}
    ;
acciones_seleccion
     ::=   {: insertarCmp(); insertarBge(); avanzar(); :}; 