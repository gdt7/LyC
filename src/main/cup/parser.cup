package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.model.SymbolTableStruct;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;


class Parser;

parser code
{:
	String myVal;
  // Lista para almacenar el código intermedio
  public List<String> intermediateCode = new ArrayList<>();
   public Stack<String> stack = new Stack<>(); // La pila para almacenar IDs y valores

  public List<String> getIntermediateCode() {
    return intermediateCode;
  }

  public void polaca(String code) {
    intermediateCode.add(code);
  }
  
  public void apilar(String value) {
    stack.push(value);
    System.out.println("Valor agregado a la pila: " + value);
  }

  public String desapilar() {
    if (!stack.isEmpty()) {
      String value = stack.pop();
      System.out.println("Valor retirado de la pila: " + value);
      return value;
    } else {
      System.out.println("Pila vacía");
      return null;
    }
  }
:};

// Terminals
terminal OP_ASIG;
terminal OP_MAS;
terminal OP_RES;
terminal OP_MULT;
terminal OP_DIV;
terminal PAR_A;
terminal PAR_C;
terminal LLAVE_A;
terminal LLAVE_C;
terminal CONST_ENT;
terminal CONST_STR;
terminal CONST_FLT;
terminal ID;
terminal MIENTRAS;
terminal OP_MAY;
terminal OP_MEN;
terminal OP_IG;
terminal OP_MAYIG;
terminal OP_MENIG;
terminal FOR;
terminal SI;
terminal SINO;
terminal AND;
terminal OR;
terminal FLOAT;
terminal INT;
terminal STRING; 
terminal PYC;
terminal READ;
terminal WRITE;
terminal INIT;
terminal NOT;
terminal DOS_PUNTOS;
terminal COMA;
terminal COR_A;
terminal COR_C;
terminal GETPENULTIMATEPOSITION;
terminal TRIANGULO;

// Non Terminals
non terminal ss;
non terminal declaracion;
non terminal listadec;
non terminal sentdec;
non terminal programa;
non terminal sentencia;
non terminal asignacion;
non terminal listaid;
non terminal iteracion;
non terminal seleccion;
non terminal entrada;
non terminal salida;
non terminal condicion;
non terminal comparacion;
non terminal comparador;
non terminal expresion;
non terminal funcion;
non terminal listaconst;
non terminal termino;
non terminal factor;

// Start Symbol Definition
// Start Symbol Definition
start with ss;

// Grammar Rules
ss 
    ::= declaracion programa
		{: System.out.println("Inicio de programa principal con bloque de declaracion de variables: "); :}
	| 	declaracion 
		{: System.out.println("Inicio del programa principal con declaracion y sin programa: "); :}
	| 	 programa
		{: System.out.println("Inicio del programa principal sin declaracion: "); :}
	| 	 
		{: System.out.println("Sin nada: "); :}
    ;
	
declaracion
	::= INIT LLAVE_A listadec LLAVE_C
		{: System.out.println("Declaracion de variables: "); :}
    ;

listadec
	::= listadec sentdec
		{: System.out.println("Lista de sentencia de declaracion de variables: "); :}
	| sentdec 
		{: 
			System.out.println("Sentencia unica de declaracion de variables: "); 
			//symbolList.add(currentSymbol);	
		:}
    ;

sentdec
	::= listaid DOS_PUNTOS INT
		{: 	System.out.println("Lista de variables enteras: "); :}
	| 	listaid DOS_PUNTOS FLOAT
		{: 	System.out.println("Lista de variables flotantes: "); :}
	| 	listaid DOS_PUNTOS STRING
		{: 	
			System.out.println("Lista de variables strings: ");
		:}
		
    ;
	
listaid
	::= listaid COMA ID:ident
		{: 	
			String idValue = (String) ident;
			polaca(idValue);
			System.out.println("Lista de IDs: "); :}
	| 	ID:ident
		{: 	
			String idValue = (String) ident;
			polaca(idValue);
			System.out.println("Lista de variables strings: ");
		:}

	;
	 
programa 
    ::= sentencia 
		{: System.out.println("Sentencia única en el programa: "); :}
    | sentencia PYC 
		{: System.out.println("Sentencia con punto y coma en el programa: "); :}
    | programa sentencia
		{: System.out.println("Programa con múltiples sentencias: "); :}
	| programa sentencia PYC
		{: System.out.println("Programa con múltiples sentencias: "); :}
    ;

sentencia 
    ::= asignacion 
		{: System.out.println("Asignación encontrada"); :}
    | iteracion 
		{: System.out.println("Iteración encontrada"); :}
    | seleccion
		{: System.out.println("Selección encontrada"); :}
	| entrada
		{: System.out.println("Entrada: "); :}
	| salida
		{: System.out.println("Salida: "); :}
    ;
	
entrada
	::= READ PAR_A ID:value PAR_C
		{: 
			String idValue = (String) value;
			polaca(idValue);
			System.out.println("Sentencia de Entrada: "); :}
    ;
	
salida
	::= WRITE PAR_A CONST_STR PAR_C
		{: System.out.println("Sentencia de entrada de una constante string: "); :}
	|   WRITE PAR_A ID PAR_C
		{: System.out.println("Sentencia de entrada de un id: "); :}
    ;
	
asignacion 
    ::= listaid OP_ASIG:value expresion
		{: 	//polaca(myVal);
			String opAsigValue = (String) value;
			polaca(opAsigValue);
			System.out.println("Lista de asignacion de variables: "); :}
    ;
	
seleccion 
    ::= SI PAR_A condicion PAR_C LLAVE_A programa LLAVE_C 
		{: System.out.println("Estructura if con condición: "); :}
    | SI PAR_A condicion PAR_C LLAVE_A programa LLAVE_C SINO LLAVE_A programa LLAVE_C
		{: System.out.println("Estructura if-else con condición: "); :}
    ;

iteracion 
    ::= MIENTRAS PAR_A condicion PAR_C LLAVE_A programa LLAVE_C 
		{: System.out.println("Estructura while con condición: "); :}
    | FOR PAR_A asignacion PYC condicion PYC expresion PAR_C LLAVE_A programa LLAVE_C
		{: System.out.println("Estructura for con asignación: " +", condición: " + ", y expresión: " ); :}
    ;
 
condicion 
    ::= comparacion 
		{: System.out.println("Condición simple: "); :}
    | condicion AND comparacion 
		{: System.out.println("Condición compuesta con AND: " +  " && "); :}
    | condicion OR comparacion
		{: System.out.println("Condición compuesta con OR: " + " || "); :}
    ;

comparacion 
    ::= expresion comparador expresion
		{: System.out.println("Comparación: "); :}
	| NOT expresion comparador expresion
		{: System.out.println("Comparación: "); :}
    ;

comparador 
    ::= OP_MAYIG:value 
    {: 	String opMayIgValue = (String) value;
		polaca(opMayIgValue);
		System.out.println("Comparador >= "); :}
    | OP_MENIG:value 
    {:  String opMenIgValue = (String) value;
		polaca(opMenIgValue);
		System.out.println("Comparador <= "); :}
    | OP_MAY:value  
	{: 	String opMayValue = (String) value;
		polaca(opMayValue);
		System.out.println("Comparador > "); :}
    | OP_MEN:value  
    {: 	String opMenValue = (String) value;
		polaca(opMenValue);
		System.out.println("Comparador < "); :}
    | OP_IG:value 
    {: 	String opIgValue = (String) value;
		polaca(opIgValue);
		System.out.println("Comparador == "); :}
    ;

expresion 
    ::= expresion OP_MAS:value termino 
		{: String opMasValue = (String) value;
			polaca(opMasValue);
			System.out.println("Expresión suma: "); :}
    | expresion OP_RES:value termino 
		{: 	String opMenosValue = (String) value;
			polaca(opMenosValue);
			System.out.println("Expresión resta: "); :}
    | termino
		{: System.out.println("Expresión simple: "); :}
	| funcion
		{: System.out.println("Expresion es Funcion especial: "); :}
    ;
	
funcion
	 ::= GETPENULTIMATEPOSITION PAR_A COR_A listaconst COR_C PAR_C
		{: 	myVal = desapilar();
			myVal = desapilar();
			polaca(myVal);
			System.out.println("Funcion especial : "); :}
	| 	TRIANGULO PAR_A expresion COMA expresion COMA expresion PAR_C
		{: System.out.println("Funcion especial: "); :}
	;

listaconst
	 ::= listaconst COMA CONST_ENT:value
		{:  String cteEntValue = (String) value;
			apilar(cteEntValue);
			//polaca(cteEntValue);
			System.out.println("Componente de lista: Constante entera "); :}
	|	listaconst COMA CONST_FLT:value
		{: 	String cteFltValue = (String) value;
			apilar(cteFltValue);
			//polaca(cteFltValue);
			System.out.println("Componente de lista: Constante flotante "); :}
	|	 CONST_FLT:value
		{: 	String cteFltValue = (String) value;
			apilar(cteFltValue);
			//polaca(cteFltValue);
			System.out.println("Constante entera: "); :}
	|	 CONST_ENT:value
		{: 	String cteEntValue = (String) value;
			apilar(cteEntValue);
			//polaca(cteEntValue);
			System.out.println("Constante entera: "); :}
	;

	
termino 
    ::= termino OP_MULT:value factor 
		{:  String opMultValue = (String) value;
			polaca(opMultValue);
			System.out.println("Término multiplicación: "); :}
    | termino OP_DIV:value  factor 
		{: String opDivValue = (String) value;
			polaca(opDivValue);
			System.out.println("Término división: " + " / "); :}
    | factor
		{: System.out.println("Término simple: " ); :}
    ;

factor 
    ::= ID:value 
		{:  String idValue = (String) value;
			polaca(idValue);
			System.out.println("Factor ID: " ); 
			//currentSymbol = new SymbolTableStruct(null,null,null,0);
		:}
    | CONST_ENT:value 
		{:  String cteEntValue = (String) value;
			polaca(cteEntValue);
			System.out.println("Factor constante entera: " ); 
			//symbolList.add(new SymbolTableStruct("_".concat(value.toString()),"Int",value,0));
		:}
	| CONST_FLT:value 
		{:  String cteFltValue = (String) value;
			polaca(cteFltValue);
			System.out.println("Factor constante flotante: " ); 
			//symbolList.add(new SymbolTableStruct("_".concat(value.toString()),"Float",value,0));
		:}
	| CONST_STR:value
		{:  String cteSrtValue = (String) value;
			polaca(cteSrtValue);
			System.out.println("Factor constante string: " ); 
			//symbolList.add(new SymbolTableStruct("_".concat(value.toString()),"String",value,value.toString().length()));
		:}
    | PAR_A expresion PAR_C
		{:  
			System.out.println("Factor expresión entre paréntesis: "); :}
    ;